version: '3.8'

services:
  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: plongee_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: plongee_db
      POSTGRES_USER: plongee_user
      POSTGRES_PASSWORD: plongee_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - plongee_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plongee_user -d plongee_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin pour administrer la base de données
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: plongee_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@plongee.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - plongee_network
    depends_on:
      postgres:
        condition: service_healthy

  # Application Frontend Next.js
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile
    container_name: plongee_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://plongee_user:plongee_password@postgres:5432/plongee_db
      - NEXT_PUBLIC_API_URL=http://localhost:3001
    ports:
      - "3000:3000"
    networks:
      - plongee_network
    depends_on:
      postgres:
        condition: service_healthy

  # Application Backend Next.js
  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile
    container_name: plongee_backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://plongee_user:plongee_password@postgres:5432/plongee_db
      - PORT=3000
    ports:
      - "3001:3000"
    networks:
      - plongee_network
    depends_on:
      postgres:
        condition: service_healthy

# Volumes persistants
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

# Réseau pour la communication entre conteneurs
networks:
  plongee_network:
    driver: bridge